# Azure DevOps pipeline for Azure deployment

variables:
- group: globomantics

parameters:
- name: 'isDestroy'
  displayName: 'Destroy operation'
  type: boolean
  default: false

trigger:
  branches:
    include:
    - main

stages:
- stage: development
  displayName: development
  jobs:
  - deployment: deploy
    environment: development
    pool:
      vmImage: ubuntu-latest
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: TerraformInstaller@0
            displayName: Install Terraform
            inputs:
              terraformVersion: '1.0.3'
      
          # Init
          - task: TerraformTaskV2@2
            displayName: Initialize Terraform
            env:
              ARM_SAS_TOKEN: $(sas_token)
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/networking'
              backendServiceArm: 'conyaem-nprd(172f7750-929c-4214-99fb-e1e8d9e582f2)'
              backendAzureRmResourceGroupName: 'itma-state'
              backendAzureRmStorageAccountName: 'itma48197'
              backendAzureRmContainerName: 'terraform-state'
              backendAzureRmKey: 'terraform.tfstate'
      
          # Check for workspace
          - task: Bash@3
            displayName: Check for Workspace
            inputs:
              targetType: 'filePath'
              filePath: '$(System.DefaultWorkingDirectory)/networking/workspacetest.sh'
              arguments: '$(Environment.Name)'
      
          - task: TerraformTaskV2@2
            displayName: Plan Terraform Deployment
            env:
              TF_WORKSPACE: '$(Environment.Name)'
              TF_VAR_sec_client_secret: $(sec_client_secret)
              ARM_SAS_TOKEN: $(sas_token)
              TF_VAR_sec_sub_id: $(sec_sub_id)
              TF_VAR_sec_client_id: $(sec_client_id)
              TF_VAR_sec_tenant_id: $(sec_tenant_id)
              TF_VAR_sec_vnet_name: $(sec_vnet_name)
              TF_VAR_sec_vnet_id: $(sec_vnet_id)
              TF_VAR_sec_resource_group: $(sec_resource_group)
              TF_VAR_sec_principal_id: $(sec_principal_id)
              TF_VAR_resource_group_name: $(resource_group_name)
              ${{ if eq(parameters.isDestroy, true) }}:
                DESTROY: "--destroy"
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/networking'
              commandOptions: '-out main.tfplan $DESTROY'
              environmentServiceNameAzureRM: 'conyaem-nprd(172f7750-929c-4214-99fb-e1e8d9e582f2)'
      
          - task: TerraformTaskV2@2
            displayName: Apply Terraform Deployment
            env:
              TF_WORKSPACE: '$(Environment.Name)'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/networking'
              commandOptions: 'main.tfplan'
              environmentServiceNameAzureRM: 'conyaem-nprd(172f7750-929c-4214-99fb-e1e8d9e582f2)'

- stage: uat
  displayName: uat
  jobs:
  - deployment: deploy
    environment: uat
    pool:
      vmImage: ubuntu-latest
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: TerraformInstaller@0
            displayName: Install Terraform
            inputs:
              terraformVersion: '1.0.3'
      
          # Init
          - task: TerraformTaskV2@2
            displayName: Initialize Terraform
            env:
              ARM_SAS_TOKEN: $(sas_token)
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/networking'
              backendServiceArm: 'conyaem-nprd(172f7750-929c-4214-99fb-e1e8d9e582f2)'
              backendAzureRmResourceGroupName: 'itma-state'
              backendAzureRmStorageAccountName: 'itma48197'
              backendAzureRmContainerName: 'terraform-state'
              backendAzureRmKey: 'terraform.tfstate'
      
          # Check for workspace
          - task: Bash@3
            displayName: Check for Workspace
            inputs:
              targetType: 'filePath'
              filePath: '$(System.DefaultWorkingDirectory)/networking/workspacetest.sh'
              arguments: '$(Environment.Name)'
      
          - task: TerraformTaskV2@2
            displayName: Plan Terraform Deployment
            env:
              TF_WORKSPACE: '$(Environment.Name)'
              TF_VAR_sec_client_secret: $(sec_client_secret)
              ARM_SAS_TOKEN: $(sas_token)
              TF_VAR_sec_sub_id: $(sec_sub_id)
              TF_VAR_sec_client_id: $(sec_client_id)
              TF_VAR_sec_tenant_id: $(sec_tenant_id)
              TF_VAR_sec_vnet_name: $(sec_vnet_name)
              TF_VAR_sec_vnet_id: $(sec_vnet_id)
              TF_VAR_sec_resource_group: $(sec_resource_group)
              TF_VAR_sec_principal_id: $(sec_principal_id)
              TF_VAR_resource_group_name: $(resource_group_name)
              ${{ if eq(parameters.isDestroy, true) }}:
                DESTROY: "--destroy"
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/networking'
              commandOptions: '-out main.tfplan $DESTROY'
              environmentServiceNameAzureRM: 'conyaem-nprd(172f7750-929c-4214-99fb-e1e8d9e582f2)'
      
          - task: TerraformTaskV2@2
            displayName: Apply Terraform Deployment
            env:
              TF_WORKSPACE: '$(Environment.Name)'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/networking'
              commandOptions: 'main.tfplan'
              environmentServiceNameAzureRM: 'conyaem-nprd(172f7750-929c-4214-99fb-e1e8d9e582f2)'

- stage: production
  displayName: production
  jobs:
  - deployment: deploy
    environment: production
    pool:
      vmImage: ubuntu-latest
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: TerraformInstaller@0
            displayName: Install Terraform
            inputs:
              terraformVersion: '1.0.3'
      
          # Init
          - task: TerraformTaskV2@2
            displayName: Initialize Terraform
            env:
              ARM_SAS_TOKEN: $(sas_token)
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/networking'
              backendServiceArm: 'conyaem-nprd(172f7750-929c-4214-99fb-e1e8d9e582f2)'
              backendAzureRmResourceGroupName: 'itma-state'
              backendAzureRmStorageAccountName: 'itma48197'
              backendAzureRmContainerName: 'terraform-state'
              backendAzureRmKey: 'terraform.tfstate'
      
          # Check for workspace
          - task: Bash@3
            displayName: Check for Workspace
            inputs:
              targetType: 'filePath'
              filePath: '$(System.DefaultWorkingDirectory)/networking/workspacetest.sh'
              arguments: '$(Environment.Name)'
      
          - task: TerraformTaskV2@2
            displayName: Plan Terraform Deployment
            env:
              TF_WORKSPACE: '$(Environment.Name)'
              TF_VAR_sec_client_secret: $(sec_client_secret)
              ARM_SAS_TOKEN: $(sas_token)
              TF_VAR_sec_sub_id: $(sec_sub_id)
              TF_VAR_sec_client_id: $(sec_client_id)
              TF_VAR_sec_tenant_id: $(sec_tenant_id)
              TF_VAR_sec_vnet_name: $(sec_vnet_name)
              TF_VAR_sec_vnet_id: $(sec_vnet_id)
              TF_VAR_sec_resource_group: $(sec_resource_group)
              TF_VAR_sec_principal_id: $(sec_principal_id)
              TF_VAR_resource_group_name: $(resource_group_name)
              ${{ if eq(parameters.isDestroy, true) }}:
                DESTROY: "--destroy"
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/networking'
              commandOptions: '-out main.tfplan $DESTROY'
              environmentServiceNameAzureRM: 'conyaem-nprd(172f7750-929c-4214-99fb-e1e8d9e582f2)'
      
          - task: TerraformTaskV2@2
            displayName: Apply Terraform Deployment
            env:
              TF_WORKSPACE: '$(Environment.Name)'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/networking'
              commandOptions: 'main.tfplan'
              environmentServiceNameAzureRM: 'conyaem-nprd(172f7750-929c-4214-99fb-e1e8d9e582f2)'
